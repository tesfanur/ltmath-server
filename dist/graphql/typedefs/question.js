"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.questionTypedefs = undefined;

var _templateObject = _taggedTemplateLiteral(["\n  \"\"\"\n  Is the complexity level of the question\n  \"\"\"\n  enum complexityLevel {\n    EASY\n    MEDIUM\n    HARD\n  }\n  \"\"\"\n  Is the type of level of the question\n  \"\"\"\n  enum typeOfQuestion {\n    MULTIPLE_CHOICE\n    WORKOUT\n    MATCHING\n    WORD_PROBLEM\n  }\n  \"\"\"\n  Topic of question\n  \"\"\"\n  type Topic {\n    _id: Int!\n    description: String!\n  }\n  \"\"\"\n  Sub Topic of question\n  \"\"\"\n  type SubTopic {\n    _id: Int!\n    description: String!\n  }\n  \"\"\"\n  List of all multiple Choices\n  \"\"\"\n  type Choice {\n    description: String\n  }\n  input ChoiceInput {\n    description: String\n  }\n  \"\"\"\n  Question type def\n  \"\"\"\n  type Question {\n    _id: ID!\n    questionNumber: String!\n    description: String!\n    topic: String! #Should be taken from selection option from user\n    subtopic: String! #Should also be taken from selection option from user\n    complexityLevel: complexityLevel!\n    multipleChoice: [Choice]\n    imageUrl: String\n    answer: String\n    explanation: String\n    addedBy: ID!\n  }\n  input QuestionInput {\n    questionNumber: String!\n    description: String!\n    topic: String! #Should be taken from selection option from user\n    subtopic: String! #Should also be taken from selection option from user\n    complexityLevel: complexityLevel!\n    multipleChoice: [ChoiceInput!]!\n    imageUrl: String\n    answer: String\n    explanation: String\n  }\n\n  input TopicInput {\n    _id: Int!\n    description: String!\n  }\n  input SubTopicInput {\n    _id: Int!\n    description: String!\n  }\n\n  extend type Query {\n    \"\"\"\n    finds question by question id\n    \"\"\"\n    getQuestionById(_id: ID!): Question!\n    \"\"\"\n    returns all available questions\n    \"\"\"\n    getAllQuestions: [Question!]!\n    \"\"\"\n    returns all available questions by question topic\n    \"\"\"\n    getAllQuestionsByTopic(topic: String): [Question!]!\n    \"\"\"\n    returns all available questions by question subtopic\n    \"\"\"\n    getAllQuestionsBySubTopic(subtopic: String): [Question!]!\n    \"\"\"\n    returns all available question by complexity Level\n    \"\"\"\n    getAllQuestionsComplexityLevel(complexityLevel: String): [Question!]!\n    \"\"\"\n    get random question\n    \"\"\"\n    getRondomQuestion: Question!\n    \"\"\"\n    get random questions\n    \"\"\"\n    getRondomQuestions: [Question!]!\n    #TODO: add the following graphql quesries\n    #getRandomQuestionByTopic\n    #getRandomQuestionBySubTopic\n    \"\"\"\n    get random questions\n    \"\"\"\n    getAllTopics: [Topic!]!\n    \"\"\"\n    get random questions\n    \"\"\"\n    getAllSubTopics: [SubTopic!]!\n  }\n  extend type Mutation {\n    \"\"\"\n    add question into db\n    \"\"\"\n    addQuestion(input: QuestionInput): Question\n    \"\"\"\n    edit question\n    \"\"\"\n    editQuestion(input: QuestionInput): Question\n    \"\"\"\n    remove question from db\n    \"\"\"\n    deleteQuestion(input: ID): Question\n    \"\"\"\n    add topic\n    \"\"\"\n    addTopic(description: String): Topic\n    \"\"\"\n    edit topic\n    \"\"\"\n    editTopic(description: String): Topic\n    \"\"\"\n    delete topic\n    \"\"\"\n    deleteTopic(description: String): Topic\n    \"\"\"\n    add sub topic\n    \"\"\"\n    addSubTopic(description: String): SubTopic\n    \"\"\"\n    edit sub topic\n    \"\"\"\n    editSubTopic(description: String): SubTopic\n    \"\"\"\n    delete sub topic\n    \"\"\"\n    deleteSubTopic(description: String): SubTopic\n  }\n"], ["\n  \"\"\"\n  Is the complexity level of the question\n  \"\"\"\n  enum complexityLevel {\n    EASY\n    MEDIUM\n    HARD\n  }\n  \"\"\"\n  Is the type of level of the question\n  \"\"\"\n  enum typeOfQuestion {\n    MULTIPLE_CHOICE\n    WORKOUT\n    MATCHING\n    WORD_PROBLEM\n  }\n  \"\"\"\n  Topic of question\n  \"\"\"\n  type Topic {\n    _id: Int!\n    description: String!\n  }\n  \"\"\"\n  Sub Topic of question\n  \"\"\"\n  type SubTopic {\n    _id: Int!\n    description: String!\n  }\n  \"\"\"\n  List of all multiple Choices\n  \"\"\"\n  type Choice {\n    description: String\n  }\n  input ChoiceInput {\n    description: String\n  }\n  \"\"\"\n  Question type def\n  \"\"\"\n  type Question {\n    _id: ID!\n    questionNumber: String!\n    description: String!\n    topic: String! #Should be taken from selection option from user\n    subtopic: String! #Should also be taken from selection option from user\n    complexityLevel: complexityLevel!\n    multipleChoice: [Choice]\n    imageUrl: String\n    answer: String\n    explanation: String\n    addedBy: ID!\n  }\n  input QuestionInput {\n    questionNumber: String!\n    description: String!\n    topic: String! #Should be taken from selection option from user\n    subtopic: String! #Should also be taken from selection option from user\n    complexityLevel: complexityLevel!\n    multipleChoice: [ChoiceInput!]!\n    imageUrl: String\n    answer: String\n    explanation: String\n  }\n\n  input TopicInput {\n    _id: Int!\n    description: String!\n  }\n  input SubTopicInput {\n    _id: Int!\n    description: String!\n  }\n\n  extend type Query {\n    \"\"\"\n    finds question by question id\n    \"\"\"\n    getQuestionById(_id: ID!): Question!\n    \"\"\"\n    returns all available questions\n    \"\"\"\n    getAllQuestions: [Question!]!\n    \"\"\"\n    returns all available questions by question topic\n    \"\"\"\n    getAllQuestionsByTopic(topic: String): [Question!]!\n    \"\"\"\n    returns all available questions by question subtopic\n    \"\"\"\n    getAllQuestionsBySubTopic(subtopic: String): [Question!]!\n    \"\"\"\n    returns all available question by complexity Level\n    \"\"\"\n    getAllQuestionsComplexityLevel(complexityLevel: String): [Question!]!\n    \"\"\"\n    get random question\n    \"\"\"\n    getRondomQuestion: Question!\n    \"\"\"\n    get random questions\n    \"\"\"\n    getRondomQuestions: [Question!]!\n    #TODO: add the following graphql quesries\n    #getRandomQuestionByTopic\n    #getRandomQuestionBySubTopic\n    \"\"\"\n    get random questions\n    \"\"\"\n    getAllTopics: [Topic!]!\n    \"\"\"\n    get random questions\n    \"\"\"\n    getAllSubTopics: [SubTopic!]!\n  }\n  extend type Mutation {\n    \"\"\"\n    add question into db\n    \"\"\"\n    addQuestion(input: QuestionInput): Question\n    \"\"\"\n    edit question\n    \"\"\"\n    editQuestion(input: QuestionInput): Question\n    \"\"\"\n    remove question from db\n    \"\"\"\n    deleteQuestion(input: ID): Question\n    \"\"\"\n    add topic\n    \"\"\"\n    addTopic(description: String): Topic\n    \"\"\"\n    edit topic\n    \"\"\"\n    editTopic(description: String): Topic\n    \"\"\"\n    delete topic\n    \"\"\"\n    deleteTopic(description: String): Topic\n    \"\"\"\n    add sub topic\n    \"\"\"\n    addSubTopic(description: String): SubTopic\n    \"\"\"\n    edit sub topic\n    \"\"\"\n    editSubTopic(description: String): SubTopic\n    \"\"\"\n    delete sub topic\n    \"\"\"\n    deleteSubTopic(description: String): SubTopic\n  }\n"]);

var _apolloServerExpress = require("apollo-server-express");

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

//TODO: add documentation for each query, resolver, etc
//using triple double quote """Resolved description """
//Math question type definition
var questionTypedefs = (0, _apolloServerExpress.gql)(_templateObject);

exports.questionTypedefs = questionTypedefs;